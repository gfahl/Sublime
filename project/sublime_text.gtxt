~
~Project: Sublime
~

~Doing

~To do

add frame: bug when there are empty lines in selection

after ctrl+9/0: don't keep selected

examine keyboard shortcuts
  which good one's are available (not used for anything interesting)?
    ctrl+j (join_lines)
    ctrl+i (show_panel incremental_find)
    possibly:
      ctrl+r (run_macro)
      ctrl+g (show_overlay goto :)
      ctrl+t (transpose)
  what commands deserve a better shortcut?

snippet for "8< --------------- (text deleted here)"

create commands to open certain folders in win file explorer and mac finder
  <Sublime project folder>/Packages/User
  <Sublime installation folder>/Packages/User
'Open Containing Folder' should be a command
| Open Containing Folder            | ctrl+q, ctrl+e            |                           |      |
| Open Packages/User Folder (Proj.) | (none)                    |                           |      |
| Open Packages/User Folder (Subl.) | (none)                    |                           |      |

idea: backup for dependence on arrow, pgup/down, home/end keys
    ijkl keys for arrows; uo for pgup/down
    let ctrl+ijkl be same as movement by arrows
        am I using any of these now?

create alternative shortcut for <del> that can be used on both mac and win
  ctrl+0 ?

change shortcuts that use key which differs from keyboard to keyboard

new command: Open Terminal
    opens a terminal at the same location as the current file
    see https://github.com/wbond/sublime_terminal

unwrap paragraph
    replaces all <newline> with <space>

mysql syntax:
    'tee' 'notee' special commands
    CONCAT_WS
    "Empty set (0.09 sec)" should be same colour as result rows (yellow)
    start transaction

new command:
    Edit -> Paste Other -> Paste Multiple Times
    prompts for the number of times to paste what is in the clipboard

check
    https://gist.github.com/edubkendo/6198986 (RubyNext.tmLanguage)

Ruby mode:
    convert between one-line and multiline method definition

=To configure/extend

always indent using spaces
sql syntax missing keywords
    index, if exists, AUTO_INCREMENT, unique
delete blank lines in selection

=To investigate

shortcut to switch from dark to bright theme

=Wishlist for Sublime

keep tab stack order when moving between projects

=Bugs to report

shortcut text in menus don't get overridden when redefined (redefinition works fine)

~Internet links

http://www.sublimetext.com/
http://www.sublimetext.com/forum/
http://sublimetext.info/
http://sublimetext.userecho.com/

=Documentation

-Official

http://www.sublimetext.com/docs/2/

-Unofficial

http://docs.sublimetext.info/en/latest/index.html
http://sublime-text-unofficial-documentation.readthedocs.org/
http://sublime-text-unofficial-documentation.readthedocs.io/en/latest/reference/commands.html

~Customization

(Ruby is used here as an example of syntax-specific customization)

=folder hierarchy for Sublime

C:\Users\Gustav\AppData\Roaming\Sublime Text 2\
    Packages
        Default
        User                                    _make your changes/additions here_
                                                _not touched at upgrade of Sublime_
        Ruby

=customization file types

-sublime-project

-sublime-workspace

used by Sublime, don't touch

-sublime-settings

Packages/Default/Preferences.sublime-settings   _contains all available settings_
Packages/User/Preferences.sublime-settings      _make your general setup changes here_
Packages/Ruby/Ruby.sublime-settings
Packages/User/Ruby.sublime-settings             _make your package specific changes here_

-sublime-keymap

Packages/Default/Default (Windows).sublime-keymap
Packages/User/Default (Windows).sublime-keymap

-sublime-menu

-sublime-commands

-sublime-snippet

-sublime-build

-tmLanguage

-tmPreferences

=creating a new command

create Python script for the command, e.g. Packages/User/my_command.py
add a line to Packages/User/Default.sublime-commands, e.g.
    { "caption": "Edit: My New Command", "command": "my_command" },
if the command has a keyboard shortcut, add a line to the .sublime-keymap files:
    Packages/User/Default (OSX).sublime-keymap
    Packages/User/Default (Windows).sublime-keymap
if the command has a menu entry, add a line to Packages/User/Main.sublime-menu
copy all the modified files in .../Sublime Text 2/Packages to ...Project/Sublime/Packages
update documentation
    project/sublime_text.gtxt

=misc

-view current settings

$ view.settings().get('font_face')

-reading

http://engineering.vinted.com/2016/06/27/how-to-write-sublime-plugin/

~Version Control

copy all files in
        Windows:
            C:\Users\Gustav\AppData\Roaming\Sublime Text 2\Packages\[package name]
        OSX:
            ~/Library/Application Support/Sublime Text 2/Packages/[package name]
    to
        Windows:
            C:\Users\Gustav\Git Projects\Sublime\Packages\[package name]
        OSX:
            ~/Project/Sublime/Packages/[package name]
where [package name] is each of
    Japanese Text
    Ruby
    Text
    User

commit changes

~New Sublime version

version control (see above)
install
copy all files in
        C:\Users\Gustav\AppData\Roaming\Sublime Text 2\Packages\Default
    to
        C:\Users\Gustav\Git Projects\Sublime\Packages\Default
check diffs in Default dir to see what's new, commit changes

~Package Control

http://wbond.net/sublime_packages/package_control

~Packages

https://github.com/timonwong/OmniMarkupPreviewer

~Console

=log keystrokes

> sublime.log_input(True)
> sublime.log_input(False)

=log commands

> sublime.log_commands(True)
> sublime.log_commands(False)

Note: as opposed to view.command_history(n), non-modifying commands are also logged

=dir()

> dir()
> dir(view)
> dir(view.run_command)

=view.sel()

returns current selections

> view.sel()
    [(1287, 1287)]              # no selection
    [(377, 391)]                # one region selected
    [(377, 391), (722, 736)]    # two regions selected
> view.sel().__class__
    <class 'sublime.RegionSet'>
> view.sel()[0].__class__
    <class 'sublime.Region'>
> print view.sel.__doc__
+------------------------------------------------------------------------+
| sel( (View)arg1) -> RegionSet :                                        |
|                                                                        |
|     C++ signature :                                                    |
|         class SelectionSet {lvalue} sel(class TextBufferView {lvalue}) |
+------------------------------------------------------------------------+

=...
view.find(...)
view.has_non_empty_selection_region()
view.insert(...)
view.rowcol(pt)
view.run_command(...)
    >>> view.run_command("insert", {"characters": "abc"})
        # inserts "abc" at current point/selection(s)
view.show(pt)
view.size()
view.visible_region()
view.word(pt)
